---
title: "Current Conditions"
---

Welcome to the Lake Alexandrina dashboad, hosted by the Virginia Tech Center for Ecosystem Forecasting ([CEF](https://www.ecoforecast.centers.vt.edu/)).
<br /> <br />
Disclaimer: The data provided on this page is experimental.

## Current Conditions for Lake Alexandrina

<br /> <br />

```{r setup, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE)
library(tidyverse)
library(arrow)
library(bslib)
library(bsicons)
library(leaflet)
library(oce)

### READ IN INSITU TARGETS
lake_directory <- getwd()
options(timeout=300)

download.file(url = paste0("https://water.data.sa.gov.au/Export/BulkExport?DateRange=Custom&StartTime=2020-01-01%2000%3A00&EndTime=", Sys.Date(), "%2000%3A00&TimeZone=0&Calendar=CALENDARYEAR&Interval=PointsAsRecorded&Step=1&ExportFormat=csv&TimeAligned=True&RoundData=True&IncludeGradeCodes=False&IncludeApprovalLevels=False&IncludeQualifiers=False&IncludeInterpolationTypes=False&Datasets[0].DatasetName=Lake%20Level.Best%20Available--Continuous%40A4261133&Datasets[0].Calculation=Instantaneous&Datasets[0].UnitId=82&Datasets[1].DatasetName=EC%20Corr.Best%20Available%40A4261133&Datasets[1].Calculation=Instantaneous&Datasets[1].UnitId=305&Datasets[2].DatasetName=Water%20Temp.Best%20Available--Continuous%40A4261133&Datasets[2].Calculation=Instantaneous&Datasets[2].UnitId=169&_=1711554907800"),
              destfile = file.path(lake_directory,"data_raw","current_insitu.csv"))

cleaned_insitu_file <- file.path(lake_directory,'targets',paste0("ALEX-targets-insitu.csv"))

obs_cleaned <- readr::read_csv(file.path(lake_directory, "data_raw/current_insitu.csv"),
                skip = 5, show_col_types = FALSE,
                col_names = c('time','Value_level', 'Value_EC', 'Value_temperature')) |>
  # simple conversion to salt
  mutate(Value_salt = oce::swSCTp(conductivity = Value_EC/1000,
                                  temperature = Value_temperature,
                                  conductivityUnit = 'mS/cm'),
         Value_depth = 5.3 + Value_level) |> # 5.3 is the height
  select(-Value_EC, -Value_level) |>
  pivot_longer(names_to = 'variable', names_prefix = 'Value_',
               cols = starts_with('Value'),
               values_to = 'observed') |>
  mutate(time = lubridate::force_tz(time, tzone = "Etc/GMT+9"),
         time = time - lubridate::minutes(30),
         time = lubridate::with_tz(time, tzone = "UTC"),
         date = lubridate::as_date(time),
         hour = lubridate::hour(time)) |>
  group_by(date, hour, variable) |>
  summarize(observation = mean(observed, na.rm = TRUE), .groups = "drop") |>
  mutate(depth = ifelse(variable %in% c('salt', 'temperature'), 0.5, NA),
         site_id = 'ALEX',
         datetime = lubridate::as_datetime(date) + lubridate::hours(hour)) |>
  filter(hour == 0) |>
  select(site_id, datetime, depth, variable, observation) #|>
  #write_csv(cleaned_insitu_file)

current_temp <- obs_cleaned |> 
  filter(datetime == Sys.Date(),
         variable == 'temperature') |> 
  mutate(var_unit = paste0(round(observation,1), ' Â°C')) |> 
  pull(var_unit)
  
current_salt <- obs_cleaned |> 
  filter(datetime == Sys.Date(),
         variable == 'salt') |> 
  mutate(var_unit = paste0(round(observation,1), ' ppt')) |> 
  pull(var_unit)

current_depth <- obs_cleaned |> 
  filter(datetime == Sys.Date(),
         variable == 'depth') |> 
  mutate(var_unit = paste0(round(observation,1), ' m')) |> 
  pull(var_unit)

last_updated <- Sys.Date()
```

```{r}

layout_column_wrap(
  width = "250px",
  value_box(
    title = "Current Water Temperature", 
    value = current_temp,
    showcase = bs_icon("thermometer-half"),
    theme_color = "success" 
  ),
  value_box(
    title = "Current Salinity", 
    value = current_salt,
    showcase = bs_icon("droplet-half"),
    theme_color = "primary"
  ),
    value_box(
    title = "Current Lake Depth", 
    value = current_depth,
    showcase = bs_icon("moisture"),
    theme_color = "primary" 
  )
)

```


## Where is this data coming from?

```{r fig.height=5, fig.width=5, echo=FALSE, include=TRUE, message = FALSE}
sites <- suppressMessages(sf::st_read("sites.json"))

leaflet() %>%
  setView(lat = -35.4391, lng = 139.1512, zoom= 9) %>%
  addTiles(group="OSM") %>%
  addProviderTiles(providers$Esri.WorldImagery, group="Imagery") %>%
  addProviderTiles(providers$Esri.WorldTopoMap, group="Topo Map") %>%
  addLayersControl(baseGroups=c('Imagery','OSM', 'Topo Map')) |> 
  addMarkers(data  = sites, popup=~as.character(site_id), group = ~as.character(Partner))#, clusterOptions = markerClusterOptions())
```

<br /> <br /> This material is based upon work supported by the National Science Foundation under Grant OISE-2330211. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation. <br /> <br /> Page last updated on `r Sys.Date()`
