---
title: "Current Conditions"
---

### Welcome to the Lake Alexandrina dashboard, hosted by the Virginia Tech Center for Ecosystem Forecasting ([CEF](https://www.ecoforecast.centers.vt.edu/)).

```{r setup, include=TRUE, echo=FALSE, message=FALSE, warning=FALSE, out.width= '250px', out.height= '175px'}
knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE)
library(tidyverse)
library(arrow)
library(bslib)
library(bsicons)
library(leaflet)
library(oce)

## paste CEF logo
knitr::include_graphics('vt_cef.jpg')
```


Disclaimer: The data provided on this page are experimental.

## Current Water Conditions for Lake Alexandrina

```{r, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}
# knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE)
# library(tidyverse)
# library(arrow)
# library(bslib)
# library(bsicons)
# library(leaflet)
# library(oce)

### READ IN INSITU TARGETS
lake_directory <- getwd()
options(timeout=300)

download.file(url = paste0("https://water.data.sa.gov.au/Export/BulkExport?DateRange=Custom&StartTime=2020-01-01%2000%3A00&EndTime=", Sys.Date()+1, "%2000%3A00&TimeZone=0&Calendar=CALENDARYEAR&Interval=PointsAsRecorded&Step=1&ExportFormat=csv&TimeAligned=True&RoundData=True&IncludeGradeCodes=False&IncludeApprovalLevels=False&IncludeQualifiers=False&IncludeInterpolationTypes=False&Datasets[0].DatasetName=Lake%20Level.Best%20Available--Continuous%40A4261133&Datasets[0].Calculation=Instantaneous&Datasets[0].UnitId=82&Datasets[1].DatasetName=EC%20Corr.Best%20Available%40A4261133&Datasets[1].Calculation=Instantaneous&Datasets[1].UnitId=305&Datasets[2].DatasetName=Water%20Temp.Best%20Available--Continuous%40A4261133&Datasets[2].Calculation=Instantaneous&Datasets[2].UnitId=169&_=1711554907800"),
              destfile = file.path(lake_directory,"data_raw","current_insitu.csv"))

cleaned_insitu_file <- file.path(lake_directory,'targets',paste0("ALEX-targets-insitu.csv"))

obs_cleaned <- readr::read_csv(file.path(lake_directory, "data_raw/current_insitu.csv"),
                skip = 5, show_col_types = FALSE,
                col_names = c('time','Value_level', 'Value_EC', 'Value_temperature')) |>
  # simple conversion to salt
  mutate(Value_salt = oce::swSCTp(conductivity = Value_EC/1000,
                                  temperature = Value_temperature,
                                  conductivityUnit = 'mS/cm'),
         Value_depth = Value_level) |> # 5.3 is the height
  select(-Value_EC, -Value_level) |>
  pivot_longer(names_to = 'variable', names_prefix = 'Value_',
               cols = starts_with('Value'),
               values_to = 'observed') |>
  mutate(date = lubridate::as_date(time),
         hour = lubridate::hour(time)) |>
  group_by(date, hour, variable) |>
  summarize(observation = mean(observed, na.rm = TRUE), .groups = "drop") |>
  mutate(depth = ifelse(variable %in% c('salt', 'temperature'), 0.5, NA),
         site_id = 'ALEX',
         datetime = lubridate::as_datetime(date) + lubridate::hours(hour)) |>
  mutate(datetime = lubridate::force_tz(datetime, tzone = "Australia/Adelaide"),
         date = lubridate::as_date(datetime),
         hour = lubridate::hour(datetime)) |> 
  #filter(hour == 0) |>
  select(site_id, datetime, depth, variable, observation) #|>
  #write_csv(cleaned_insitu_file)

obs_updated <- max(obs_cleaned$datetime,na.rm = TRUE)


current_temp <- obs_cleaned |> 
  filter(datetime == obs_updated,
         variable == 'temperature') |> 
  mutate(var_unit = paste0(round(observation,1), ' Â°C')) |> 
  pull(var_unit)
  
current_salt <- obs_cleaned |> 
  filter(datetime == obs_updated,
         variable == 'salt') |> 
  mutate(var_unit = paste0(round(observation,1), ' ppt')) |> 
  pull(var_unit)

current_depth <- obs_cleaned |> 
  filter(datetime == obs_updated,
         variable == 'depth') |> 
  mutate(var_unit = paste0(round(observation,1), ' AHD')) |> 
  pull(var_unit)

site_updated <- Sys.Date()
```

<br /> Conditions are valid for `r toString(obs_updated)` <br />

```{r, include=FALSE}
## make current condition information for wind 
## use average wind conditions for last six hours?
source('./R/degToCompass.R')

most_recent_wind <- read_csv('targets/ALEX_wind_dir_targets.csv') |> 
  mutate(datetime = lubridate::force_tz(datetime, tzone = "Australia/Adelaide")) |> 
  filter(row_number() == n()) |> 
  pull(datetime)

wind_dir_obs <- read_csv('targets/ALEX_wind_dir_targets.csv') |> 
  mutate(datetime = lubridate::force_tz(datetime, tzone = "Australia/Adelaide")) |> 
  filter(datetime > (most_recent_wind - lubridate::hours(5))) |> 
  mutate(wind_hour = lubridate::hour(datetime)) |> 
  group_by(wind_hour) |>  
  summarise(wind_dir_mean_hour = mean(value, na.rm = TRUE)) |> 
  ungroup() |>
  summarise(wind_dir_mean = mean(wind_dir_mean_hour)) |> 
  mutate(mean_wind_direction = degToCompass(wind_dir_mean))

wind_speed_obs <- read_csv('targets/ALEX_wind_speed_targets.csv') |> 
  mutate(datetime = lubridate::force_tz(datetime, tzone = "Australia/Adelaide")) |> 
  filter(datetime >= (most_recent_wind - lubridate::hours(5))) |> 
  filter(datetime <= most_recent_wind) |> 
  mutate(wind_hour = lubridate::hour(datetime)) |> 
  group_by(wind_hour) |> 
  summarise(wind_speed_mean_hour = mean(value, na.rm = TRUE)*3.6) |> 
  ungroup() |>
  summarise(wind_speed_mean = (mean(wind_speed_mean_hour))) ## m/s -> km-hr

# wind_df <- data.frame(wind_dir = wind_dir_obs$wind_dir_mean_hour, wind_speed = wind_speed_obs$wind_speed_mean_hour)

# wind_dates <- read_csv('targets/ALEX_wind_dir_targets.csv') |> 
#   mutate(datetime = lubridate::force_tz(datetime, tzone = "Australia/Adelaide")) |> 
#   filter(datetime > (most_recent_wind - lubridate::hours(6))) |> 
#   mutate(wind_minute = lubridate::minute(datetime)) |> 
#   filter(wind_minute == 0)

# wind_df <- data.frame(datetime = wind_dates$datetime,
#                       wind_dir = wind_dir_obs$wind_dir_mean_hour, 
#                       wind_speed = wind_speed_obs$wind_speed_mean_hour) |> 
#   summarise(mean_wind_deg = mean(wind_dir, na.rm = TRUE),
#          mean_wind_speed = mean(wind_speed, na.rm = TRUE)) |> # convert to km/hr
#   mutate(mean_wind_direction = degToCompass(mean_wind_deg)) #|> 
#  # select(datetime, mean_wind_deg, mean_wind_speed, windmean_wind_direction)
```

```{r}

layout_column_wrap(
  width = "250px",
  value_box(
    title = "Current Water Temperature", 
    value = current_temp,
    showcase = bs_icon("thermometer-half"),
    theme_color = "primary" 
  ),
  value_box(
    title = "Current Salinity", 
    value = current_salt,
    showcase = bs_icon("droplet-half"),
    theme_color = "primary"
  ),
    value_box(
    title = "Current Lake Height", 
    value = current_depth,
    showcase = bs_icon("moisture"),
    theme_color = "primary" 
  )
)

```

<br /> 

## Average Wind Conditions for Lake Alexandrina (last 6 hours)

```{r}
layout_column_wrap(
  width = "250px",
  value_box(
    title = "Average Wind Speed", 
    value = paste(round(wind_speed_obs$wind_speed_mean,2), ' km/hr'),
    showcase = bs_icon("cloud-fog2"),
    theme_color = "primary" 
  ),
  value_box(
    title = "Average Wind Direction", 
    value = wind_dir_obs$mean_wind_direction,
    showcase = bs_icon("compass"),
    theme_color = "primary"
  )
)
```

## Where is this data coming from?

The observed data are from [SA Water](https://www.sawater.com.au/) at the locations in the map below

```{r, include=FALSE}
sites <- suppressMessages(sf::st_read("sites.json"))
```

```{r fig.height=5, fig.width=5, echo=FALSE, include=TRUE, message = FALSE}
#sites <- suppressMessages(sf::st_read("sites.json"))

leaflet() %>%
  setView(lat = -35.4391, lng = 139.1512, zoom= 11) %>%
  addTiles(group="OSM") %>%
  addProviderTiles(providers$Esri.WorldImagery, group="Imagery") %>%
  addProviderTiles(providers$Esri.WorldTopoMap, group="Topo Map") %>%
  addLayersControl(baseGroups=c('Imagery','OSM', 'Topo Map')) |> 
  addMarkers(data  = sites, popup=~as.character(site_id), group = ~as.character(Partner))#, clusterOptions = markerClusterOptions())
```

<br /> <br /> This material is based upon work supported by the National Science Foundation under Grant OISE-2330211. Any opinions, findings, and conclusions or recommendations expressed in this material are those of the author(s) and do not necessarily reflect the views of the National Science Foundation. <br /> <br /> 

We would like to acknowledge [SA Water](https://www.sawater.com.au/) for providing observational data for the forecasts presented on this dashboard. <br /> <br /> 

Page last updated on `r Sys.Date()`
