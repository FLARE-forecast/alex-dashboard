{"title":"Weather Forecasts","markdown":{"yaml":{"title":"Weather Forecasts"},"headingText":"Met vizualization","containsRefs":false,"markdown":"\n\nThis page contains information about weather in the Lake Alexandrina area\n\n<br /> <br />\n\nDisclaimer: The data provided on this page is experimental.\n\n```{r setup, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}\nlibrary(tidyverse)\nlibrary(arrow)\nlibrary(bslib)\nlibrary(bsicons)\nlibrary(leaflet)\n\nsource('R/wind_plot_dashboard.R')\n\nlake_directory <- getwd()\noptions(timeout=300)\n\nknitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE)\n\ndegToCompass <- function(num){\n\n  arr = c(\"N\",\"NNE\",\"NE\",\"ENE\",\"E\",\"ESE\", \"SE\", \"SSE\",\"S\",\"SSW\",\"SW\",\"WSW\",\"W\",\"WNW\",\"NW\",\"NNW\")\n\n  val = as.numeric((num/22.5) + 0.5)\n  val_position <- val %% 16\n\n  \n  if (any(val > 16)){\n    val_over <- which(val > 16)\n    \n    for (i in val_over){\n      print(i)\n      val_position[i] <- 16 ## hard code the index to 16 (last value in the wind directions)\n      print(length(val_position[i]))\n    }\n  } \n  \n  if (any(val < 1)){\n    val_under <- which(val < 1)\n    for (i in val_under){\n      print(i)\n      val_position[i] <- 1 ## hard code the index to 16 (last value in the wind directions)\n      print(length(val_position[i]))\n    }  \n    }\n  \n  wind_direction <- arr[val_position] \n  \n  return(wind_direction)\n}\n\ns3_score <- arrow::s3_bucket(bucket = \"bio230121-bucket01/flare/scores/parquet\", endpoint_override = \"renc.osn.xsede.org\", anonymous = TRUE)\nmost_recent <-  arrow::open_dataset(s3_score) |> \n  filter(site_id %in% c(\"ALEX\")) |> \n  summarize(max = max(reference_datetime)) |> \n  collect() |> \n  pull()\n\n# windspeed \nnoaa_date <- most_recent - lubridate::days(1)\nnoaa_df <- arrow::s3_bucket(file.path(\"bio230121-bucket01/flare/drivers/met/gefs-v12/stage2\",paste0(\"reference_datetime=\",noaa_date),paste0(\"site_id=ALEX\")),\n                 endpoint_override = 'renc.osn.xsede.org',\n                 anonymous = TRUE)\n\nair_temp_df <- arrow::open_dataset(noaa_df) |> \n  dplyr::filter(variable %in% c(\"air_temperature\")) |> \n  collect()\n\nnorthwind_df <- arrow::open_dataset(noaa_df) |> \n  dplyr::filter(variable %in% c(\"northward_wind\")) |> \n  collect()\n\neastwind_df <- arrow::open_dataset(noaa_df) |> \n  dplyr::filter(variable %in% c(\"eastward_wind\")) |> \n  collect()\n\nfuture_met_df_em_avg <- dplyr::bind_rows(northwind_df, eastwind_df, air_temp_df) |> \n  pivot_wider(names_from = variable, values_from = prediction) |> \n  group_by(parameter, datetime) |> \n  mutate(windspeed = sqrt(northward_wind^2 + eastward_wind^2)) |> \n  group_by(datetime) |> ## group across EMs\n  mutate(windspeed_median_em = median(windspeed, na.rm = TRUE),\n         #windspeed_sd_em = sd(windspeed, na.rm = TRUE),\n         windspeed_ci_025_em = quantile(windspeed, probs = c(.025)),\n         windspeed_ci_975_em = quantile(windspeed, probs = c(.975)),\n         eastwind_avg_em = median(eastward_wind, na.rm = TRUE), \n         northwind_avg_em = median(northward_wind, na.rm = TRUE),\n         air_temp_avg_em = median((air_temperature - 273.15))) |> \n  ungroup() |> \n  distinct(datetime, .keep_all = TRUE) |> \n  mutate(wind_deg = ((270-atan2(eastwind_avg_em,northwind_avg_em)*180/pi)%%360), ## ADD WIND DIRECTION\n         wind_dir = degToCompass(wind_deg)) |> \n  select(datetime, wind_speed = windspeed_median_em, wind_deg, wind_dir, air_temp = air_temp_avg_em)\n```\n\n<br /> <br />\n\n```{r, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}\n## MAKE PLOT SHOWING HISTORICAL OBS, HISTORICAL FORECAST, AND FUTURE FORECAST\n\nif (!dir.exists(file.path(lake_directory,'data_raw'))){\n  dir.create(file.path(lake_directory,'data_raw'))\n}\n\n# download wind velocity\ndownload.file(url = paste0(\"https://water.data.sa.gov.au/Export/DataSet?DataSet=Wind%20Vel.Best%20Available--Continuous%40A4260603&Calendar=CALENDARYEAR&DateRange=Days30&UnitID=185&Conversion=Instantaneous&IntervalPoints=PointsAsRecorded&ApprovalLevels=False&Qualifiers=False&Step=1&ExportFormat=csv&Compressed=true&RoundData=True&GradeCodes=True&InterpolationTypes=False&Timezone=9.5&_=1733427930976\"),\n              destfile = file.path(lake_directory,\"data_raw\",\"wind_velocity_obs.csv\"))\n\n# download wind direction\ndownload.file(url = paste0(\"https://water.data.sa.gov.au/Export/DataSet?DataSet=Wind%20Dir.Telem%40A4260603&Calendar=CALENDARYEAR&DateRange=Days30&UnitID=52&Conversion=Instantaneous&IntervalPoints=PointsAsRecorded&ApprovalLevels=False&Qualifiers=False&Step=1&ExportFormat=csv&Compressed=true&RoundData=True&GradeCodes=True&InterpolationTypes=False&Timezone=9.5&_=1733428211983\"),\n              destfile = file.path(lake_directory,\"data_raw\",\"wind_direction_obs.csv\"))\n\n\n## NOAA FUTURE DATA READ IN ABOVE\n\n## NOAA HISTORICAL DATA\nnoaa_historical_s3 <- arrow::s3_bucket(bucket = \"bio230121-bucket01/flare/drivers/met/gefs-v12/stage3/site_id=ALEX\", \n                                   endpoint_override = \"renc.osn.xsede.org\", anonymous = TRUE)\n\nhistorical_date_cutoff <- noaa_date - lubridate::days(10)\n\nnoaa_historical_df <- arrow::open_dataset(noaa_historical_s3) |> \n  filter(variable %in% c('air_temperature','northward_wind','eastward_wind'),\n         datetime <= noaa_date, \n         datetime > historical_date_cutoff) |> \n  collect()\n\nhistorical_met_df_em_avg <- noaa_historical_df |> \n  pivot_wider(names_from = variable, values_from = prediction) |> \n  group_by(parameter, datetime) |> \n  mutate(windspeed = sqrt(northward_wind^2 + eastward_wind^2)) |> \n  group_by(datetime) |> ## group across EMs\n  mutate(windspeed_median_em = median(windspeed, na.rm = TRUE),\n         #windspeed_sd_em = sd(windspeed, na.rm = TRUE),\n         windspeed_ci_025_em = quantile(windspeed, probs = c(.025)),\n         windspeed_ci_975_em = quantile(windspeed, probs = c(.975)),\n         eastwind_avg_em = median(eastward_wind, na.rm = TRUE), \n         northwind_avg_em = median(northward_wind, na.rm = TRUE),\n         air_temp_avg_em = median((air_temperature - 273.15))) |> \n  ungroup() |> \n  distinct(datetime, .keep_all = TRUE) |> \n  mutate(wind_deg = ((270-atan2(eastwind_avg_em,northwind_avg_em)*180/pi)%%360), \n         wind_dir = degToCompass(wind_deg)) |> \n  select(datetime, wind_speed = windspeed_median_em, wind_deg, wind_dir, air_temp = air_temp_avg_em)\n```\n\n```{r, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}\n\n## READ IN WIND OBSERVATIONS\n\nwind_dir_obs <- read_csv('data_raw/wind_direction_obs.csv', skip=1) |> \n  rename(datetime = `Timestamp (UTC+09:30)`, value = `Value (deg)`, code = `Grade Code`) |> \n  filter(datetime > (historical_date_cutoff), \n         datetime <= noaa_date) |> \n  mutate(date = as.Date(datetime),\n         hour = lubridate::hour(datetime)) |> \n  group_by(date, hour) |> \n  summarise(wind_deg_obs = mean(value, na.rm = TRUE)) |> \n  ungroup() |> \n  mutate(time = paste0(hour,':00:00'),\n         datetime = as.POSIXct(paste(date,time), format=\"%Y-%m-%d %H:%M:%S\")) |> \n  select(datetime, wind_deg_obs)\n\nwind_velocity_obs <- read_csv('data_raw/wind_velocity_obs.csv',skip=1) |> \n  rename(datetime = `Timestamp (UTC+09:30)`, value = `Value (m/s)`, code = `Grade Code`) |> \n  filter(datetime > (historical_date_cutoff), \n         datetime < noaa_date) |>\n  mutate(date = as.Date(datetime),\n         hour = lubridate::hour(datetime)) |> \n  group_by(date, hour) |> \n  summarise(wind_speed_obs = mean(value, na.rm = TRUE)) |> \n  ungroup() |> \n  mutate(time = paste0(hour,':00:00'),\n         datetime = as.POSIXct(paste(date,time), format=\"%Y-%m-%d %H:%M:%S\")) |> \n  select(datetime, wind_speed_obs)\n\nwind_obs_df <- wind_dir_obs |> \n  right_join(wind_velocity_obs, by = c('datetime'))\n\nhistorical_met_df <- historical_met_df_em_avg |> \n  right_join(wind_obs_df, by = c('datetime')) |> \n  drop_na(wind_deg)\n\n# JOIN historic data / obs with future\n\nfuture_met_df_em_avg$wind_deg_obs <- NA\nfuture_met_df_em_avg$wind_speed_obs <- NA\n\nfull_met_data_df <- dplyr::bind_rows(historical_met_df, future_met_df_em_avg) |> \nmutate(wind_speed = wind_speed*3.6,\nwind_speed_obs = wind_speed_obs * 3.6) # convert wind to km/hr\n\n```\n\n```{r, include=TRUE, echo=FALSE, message=FALSE, warning=FALSE}\n\n## MAKE PLOTS\nforecast_start_day <- most_recent\nhistorical_horizon <- 10\n\n## wind speed \nws_ylims <- c(0,40)\nvar_unit <- 'Wind Speed (km/hr)'\nvar_title <- 'Wind Speed'\n\nws_plot <- ggplot2::ggplot(full_met_data_df, ggplot2::aes(x = datetime)) +\n  ggplot2::ylim(ws_ylims) +\n  ggplot2::xlim(forecast_start_day - lubridate::days(historical_horizon), (max(full_met_data_df$datetime)) + lubridate::days(5)) +\n  ggplot2::geom_line(ggplot2::aes(y = wind_speed), color = 'black') +\n  ggplot2::geom_point(ggplot2::aes(x = datetime, y = wind_speed_obs), color = 'red') +\n  ggplot2::geom_vline(aes(xintercept = forecast_start_day),\n                      alpha = 1, linetype = \"dashed\") +\n  ggplot2::annotate(x = (forecast_start_day - lubridate::days(3)), y = max(ws_ylims) - 1, label = 'Past', geom = 'text') +\n  ggplot2::annotate(x = (forecast_start_day + lubridate::days(3)), y = max(ws_ylims) - 1, label = 'Future', geom = 'text') +\n  ggplot2::theme_light() +\n  ggplot2::scale_linetype_manual(name = \"\",\n                                 values = c('solid'),\n                                 labels = c('Forecast Date')) +\n  ggplot2::scale_y_continuous(name = var_unit,\n                              limits = ws_ylims) +\n  ggplot2::labs(x = \"Date\",\n                y = var_unit,\n                title = paste0(var_title,\" Forecast\", lubridate::date(full_met_data_df$forecast_start_day))) +#,\n  ggplot2::theme(axis.text.x = ggplot2::element_text(size = 10),\n                 plot.title = element_text(hjust = 0.5))\n\nws_plot\n\n```\n\n```{r, include=TRUE, echo=FALSE, message=FALSE, warning=FALSE}\n\n## Wind direction\nwd_ylims <- c(0,360)\nwd_var_unit <- 'Wind Direction (deg)'\nvar_title <- 'Wind Direction'\n\nwd_plot <- ggplot2::ggplot(full_met_data_df, ggplot2::aes(x = datetime)) +\n  ggplot2::ylim(wd_ylims) +\n  ggplot2::xlim(forecast_start_day - lubridate::days(historical_horizon), (max(full_met_data_df$datetime)) + lubridate::days(5)) +\n  ggplot2::geom_line(ggplot2::aes(y = wind_deg), color = 'black') +\n  ggplot2::geom_point(ggplot2::aes(x = datetime, y = wind_deg_obs), color = 'red') +\n  ggplot2::geom_vline(aes(xintercept = forecast_start_day),\n                      alpha = 1, linetype = \"dashed\") +\n  ggplot2::annotate(x = (forecast_start_day - lubridate::days(3)), y = max(wd_ylims) - 1, label = 'Past', geom = 'text') +\n  ggplot2::annotate(x = (forecast_start_day + lubridate::days(3)), y = max(wd_ylims) - 1, label = 'Future', geom = 'text') +\n  ggplot2::theme_light() +\n  ggplot2::scale_linetype_manual(name = \"\",\n                                 values = c('solid'),\n                                 labels = c('Forecast Date')) +\n  ggplot2::scale_y_continuous(name = wd_var_unit,\n                              limits = wd_ylims) +\n  ggplot2::labs(x = \"Date\",\n                y = var_unit,\n                title = paste0(var_title,\" Forecast\", lubridate::date(full_met_data_df$forecast_start_day))) +#,\n  ggplot2::theme(axis.text.x = ggplot2::element_text(size = 10),\n                 plot.title = element_text(hjust = 0.5))\n\nwd_plot\n\n```\n\n```{# {r, include=TRUE, echo=FALSE, message=FALSE, warning=FALSE}\n# \n# ## MAKE PLOTS\n# forecast_start_day <- most_recent\n# historical_horizon <- 10\n# \n# ## wind speed \n# ws_ylims <- c(0,40)\n# var_unit <- 'Wind Speed (km/hr)'\n# var_title <- 'Wind Speed'\n# \n# ws_plot <- ggplot2::ggplot(full_met_data_df, ggplot2::aes(x = datetime)) +\n#   ggplot2::ylim(ws_ylims) +\n#   ggplot2::xlim(forecast_start_day - lubridate::days(historical_horizon), (max(full_met_data_df$datetime)) + lubridate::days(5)) +\n#   ggplot2::geom_line(ggplot2::aes(y = wind_speed), color = 'black') +\n#   ggplot2::geom_point(ggplot2::aes(x = datetime, y = wind_speed_obs), color = 'red') +\n#   ggplot2::geom_vline(aes(xintercept = forecast_start_day),\n#                       alpha = 1, linetype = \"dashed\") +\n#   ggplot2::annotate(x = (forecast_start_day - lubridate::days(3)), y = max(ws_ylims) - 1, label = 'Past', geom = 'text') +\n#   ggplot2::annotate(x = (forecast_start_day + lubridate::days(3)), y = max(ws_ylims) - 1, label = 'Future', geom = 'text') +\n#   ggplot2::theme_light() +\n#   ggplot2::scale_linetype_manual(name = \"\",\n#                                  values = c('solid'),\n#                                  labels = c('Forecast Date')) +\n#   ggplot2::scale_y_continuous(name = var_unit,\n#                               limits = ws_ylims) +\n#   ggplot2::labs(x = \"Date\",\n#                 y = var_unit,\n#                 title = paste0(var_title,\" Forecast\", lubridate::date(full_met_data_df$forecast_start_day))) +#,\n#   ggplot2::theme(axis.text.x = ggplot2::element_text(size = 10),\n#                  plot.title = element_text(hjust = 0.5))\n# \n# ws_plot\n\n```\n\n```{r, include=TRUE, echo=FALSE, message=FALSE, warning=FALSE}\n\n## Air Temperature\nat_ylims <- c(10,30)\nat_var_title = 'Air Temperature'\nat_var_unit = 'Temperature (°C)' \n\nat_plot <- ggplot2::ggplot(full_met_data_df, ggplot2::aes(x = datetime)) +\n  ggplot2::ylim(at_ylims) +\n  ggplot2::xlim(forecast_start_day - lubridate::days(historical_horizon), (max(full_met_data_df$datetime)) + lubridate::days(5)) +\n  ggplot2::geom_line(ggplot2::aes(y = air_temp), color = 'black') +\n  #ggplot2::geom_point(ggplot2::aes(x = datetime, y = wind_deg_obs), color = 'red') +\n  ggplot2::geom_vline(aes(xintercept = forecast_start_day),\n                      alpha = 1, linetype = \"dashed\") +\n  ggplot2::annotate(x = (forecast_start_day - lubridate::days(3)), y = max(at_ylims) - 1, label = 'Past', geom = 'text') +\n  ggplot2::annotate(x = (forecast_start_day + lubridate::days(3)), y = max(at_ylims) - 1, label = 'Future', geom = 'text') +\n  ggplot2::theme_light() +\n  ggplot2::scale_linetype_manual(name = \"\",\n                                 values = c('solid'),\n                                 labels = c('Forecast Date')) +\n  ggplot2::scale_y_continuous(name = at_var_unit,\n                              limits = at_ylims) +\n  ggplot2::labs(x = \"Date\",\n                y = at_var_unit,\n                title = paste0(at_var_title,\" Forecast\")) +#,\n  ggplot2::theme(axis.text.x = ggplot2::element_text(size = 10),\n                 plot.title = element_text(hjust = 0.5))\n\nat_plot\n## 3-Day Wind Direction and Wind Speed Predictions \n```\n\n```{r}\n\n#layout_column_wrap(\n#  width = \"250px\",\n#  value_box(\n#    title = \"Average wind direction for the next three days\", \n#    value = avg_wind_dir_3_day_future,\n#    showcase = bs_icon(\"compass\"),\n#    theme_color = \"primary\"\n#  ),\n#    value_box(\n#    title = \"Average wind speed for the next three days\", \n#    value = paste0(round(avg_wind_speed_3_day_future,1), ' m/s'),\n#    showcase = bs_icon(\"wind\"),\n#    theme_color = \"success\" \n#  )\n#)\n\n```\n\n<br /> <br />\n\n```{r}\n\n## ADD UNCERTAINTY TO THIS PLOT \n\n#wind_df_subset <- wind_df |> \n#  filter(date > as.Date(most_recent), \n#         date <= (as.Date(most_recent) + lubridate::days(3)))\n\n#ggplot2::ggplot(wind_df_subset, aes(x=as.Date(date))) +\n#  geom_line(aes(y=windspeed), line = 'black') +\n#  ggplot2::geom_ribbon(ggplot2::aes(ymin = windspeed_ci_025, \n#                                    ymax = windspeed_ci_975),\n#                       alpha = 0.5,\n#                       fill = 'lightblue') +\n#  labs(x = 'Date',\n#       y = 'Windspeed (m/s)',\n#       title = 'Three-Day Wind Speed Forecast') +\n#  ggplot2::theme(plot.title = element_text(hjust = 0.5))\n  \n```\n","srcMarkdownNoYaml":"\n\nThis page contains information about weather in the Lake Alexandrina area\n\n<br /> <br />\n\nDisclaimer: The data provided on this page is experimental.\n\n```{r setup, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}\nlibrary(tidyverse)\nlibrary(arrow)\nlibrary(bslib)\nlibrary(bsicons)\nlibrary(leaflet)\n\nsource('R/wind_plot_dashboard.R')\n\nlake_directory <- getwd()\noptions(timeout=300)\n\nknitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE)\n\ndegToCompass <- function(num){\n\n  arr = c(\"N\",\"NNE\",\"NE\",\"ENE\",\"E\",\"ESE\", \"SE\", \"SSE\",\"S\",\"SSW\",\"SW\",\"WSW\",\"W\",\"WNW\",\"NW\",\"NNW\")\n\n  val = as.numeric((num/22.5) + 0.5)\n  val_position <- val %% 16\n\n  \n  if (any(val > 16)){\n    val_over <- which(val > 16)\n    \n    for (i in val_over){\n      print(i)\n      val_position[i] <- 16 ## hard code the index to 16 (last value in the wind directions)\n      print(length(val_position[i]))\n    }\n  } \n  \n  if (any(val < 1)){\n    val_under <- which(val < 1)\n    for (i in val_under){\n      print(i)\n      val_position[i] <- 1 ## hard code the index to 16 (last value in the wind directions)\n      print(length(val_position[i]))\n    }  \n    }\n  \n  wind_direction <- arr[val_position] \n  \n  return(wind_direction)\n}\n\ns3_score <- arrow::s3_bucket(bucket = \"bio230121-bucket01/flare/scores/parquet\", endpoint_override = \"renc.osn.xsede.org\", anonymous = TRUE)\nmost_recent <-  arrow::open_dataset(s3_score) |> \n  filter(site_id %in% c(\"ALEX\")) |> \n  summarize(max = max(reference_datetime)) |> \n  collect() |> \n  pull()\n\n## Met vizualization\n# windspeed \nnoaa_date <- most_recent - lubridate::days(1)\nnoaa_df <- arrow::s3_bucket(file.path(\"bio230121-bucket01/flare/drivers/met/gefs-v12/stage2\",paste0(\"reference_datetime=\",noaa_date),paste0(\"site_id=ALEX\")),\n                 endpoint_override = 'renc.osn.xsede.org',\n                 anonymous = TRUE)\n\nair_temp_df <- arrow::open_dataset(noaa_df) |> \n  dplyr::filter(variable %in% c(\"air_temperature\")) |> \n  collect()\n\nnorthwind_df <- arrow::open_dataset(noaa_df) |> \n  dplyr::filter(variable %in% c(\"northward_wind\")) |> \n  collect()\n\neastwind_df <- arrow::open_dataset(noaa_df) |> \n  dplyr::filter(variable %in% c(\"eastward_wind\")) |> \n  collect()\n\nfuture_met_df_em_avg <- dplyr::bind_rows(northwind_df, eastwind_df, air_temp_df) |> \n  pivot_wider(names_from = variable, values_from = prediction) |> \n  group_by(parameter, datetime) |> \n  mutate(windspeed = sqrt(northward_wind^2 + eastward_wind^2)) |> \n  group_by(datetime) |> ## group across EMs\n  mutate(windspeed_median_em = median(windspeed, na.rm = TRUE),\n         #windspeed_sd_em = sd(windspeed, na.rm = TRUE),\n         windspeed_ci_025_em = quantile(windspeed, probs = c(.025)),\n         windspeed_ci_975_em = quantile(windspeed, probs = c(.975)),\n         eastwind_avg_em = median(eastward_wind, na.rm = TRUE), \n         northwind_avg_em = median(northward_wind, na.rm = TRUE),\n         air_temp_avg_em = median((air_temperature - 273.15))) |> \n  ungroup() |> \n  distinct(datetime, .keep_all = TRUE) |> \n  mutate(wind_deg = ((270-atan2(eastwind_avg_em,northwind_avg_em)*180/pi)%%360), ## ADD WIND DIRECTION\n         wind_dir = degToCompass(wind_deg)) |> \n  select(datetime, wind_speed = windspeed_median_em, wind_deg, wind_dir, air_temp = air_temp_avg_em)\n```\n\n<br /> <br />\n\n```{r, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}\n## MAKE PLOT SHOWING HISTORICAL OBS, HISTORICAL FORECAST, AND FUTURE FORECAST\n\nif (!dir.exists(file.path(lake_directory,'data_raw'))){\n  dir.create(file.path(lake_directory,'data_raw'))\n}\n\n# download wind velocity\ndownload.file(url = paste0(\"https://water.data.sa.gov.au/Export/DataSet?DataSet=Wind%20Vel.Best%20Available--Continuous%40A4260603&Calendar=CALENDARYEAR&DateRange=Days30&UnitID=185&Conversion=Instantaneous&IntervalPoints=PointsAsRecorded&ApprovalLevels=False&Qualifiers=False&Step=1&ExportFormat=csv&Compressed=true&RoundData=True&GradeCodes=True&InterpolationTypes=False&Timezone=9.5&_=1733427930976\"),\n              destfile = file.path(lake_directory,\"data_raw\",\"wind_velocity_obs.csv\"))\n\n# download wind direction\ndownload.file(url = paste0(\"https://water.data.sa.gov.au/Export/DataSet?DataSet=Wind%20Dir.Telem%40A4260603&Calendar=CALENDARYEAR&DateRange=Days30&UnitID=52&Conversion=Instantaneous&IntervalPoints=PointsAsRecorded&ApprovalLevels=False&Qualifiers=False&Step=1&ExportFormat=csv&Compressed=true&RoundData=True&GradeCodes=True&InterpolationTypes=False&Timezone=9.5&_=1733428211983\"),\n              destfile = file.path(lake_directory,\"data_raw\",\"wind_direction_obs.csv\"))\n\n\n## NOAA FUTURE DATA READ IN ABOVE\n\n## NOAA HISTORICAL DATA\nnoaa_historical_s3 <- arrow::s3_bucket(bucket = \"bio230121-bucket01/flare/drivers/met/gefs-v12/stage3/site_id=ALEX\", \n                                   endpoint_override = \"renc.osn.xsede.org\", anonymous = TRUE)\n\nhistorical_date_cutoff <- noaa_date - lubridate::days(10)\n\nnoaa_historical_df <- arrow::open_dataset(noaa_historical_s3) |> \n  filter(variable %in% c('air_temperature','northward_wind','eastward_wind'),\n         datetime <= noaa_date, \n         datetime > historical_date_cutoff) |> \n  collect()\n\nhistorical_met_df_em_avg <- noaa_historical_df |> \n  pivot_wider(names_from = variable, values_from = prediction) |> \n  group_by(parameter, datetime) |> \n  mutate(windspeed = sqrt(northward_wind^2 + eastward_wind^2)) |> \n  group_by(datetime) |> ## group across EMs\n  mutate(windspeed_median_em = median(windspeed, na.rm = TRUE),\n         #windspeed_sd_em = sd(windspeed, na.rm = TRUE),\n         windspeed_ci_025_em = quantile(windspeed, probs = c(.025)),\n         windspeed_ci_975_em = quantile(windspeed, probs = c(.975)),\n         eastwind_avg_em = median(eastward_wind, na.rm = TRUE), \n         northwind_avg_em = median(northward_wind, na.rm = TRUE),\n         air_temp_avg_em = median((air_temperature - 273.15))) |> \n  ungroup() |> \n  distinct(datetime, .keep_all = TRUE) |> \n  mutate(wind_deg = ((270-atan2(eastwind_avg_em,northwind_avg_em)*180/pi)%%360), \n         wind_dir = degToCompass(wind_deg)) |> \n  select(datetime, wind_speed = windspeed_median_em, wind_deg, wind_dir, air_temp = air_temp_avg_em)\n```\n\n```{r, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}\n\n## READ IN WIND OBSERVATIONS\n\nwind_dir_obs <- read_csv('data_raw/wind_direction_obs.csv', skip=1) |> \n  rename(datetime = `Timestamp (UTC+09:30)`, value = `Value (deg)`, code = `Grade Code`) |> \n  filter(datetime > (historical_date_cutoff), \n         datetime <= noaa_date) |> \n  mutate(date = as.Date(datetime),\n         hour = lubridate::hour(datetime)) |> \n  group_by(date, hour) |> \n  summarise(wind_deg_obs = mean(value, na.rm = TRUE)) |> \n  ungroup() |> \n  mutate(time = paste0(hour,':00:00'),\n         datetime = as.POSIXct(paste(date,time), format=\"%Y-%m-%d %H:%M:%S\")) |> \n  select(datetime, wind_deg_obs)\n\nwind_velocity_obs <- read_csv('data_raw/wind_velocity_obs.csv',skip=1) |> \n  rename(datetime = `Timestamp (UTC+09:30)`, value = `Value (m/s)`, code = `Grade Code`) |> \n  filter(datetime > (historical_date_cutoff), \n         datetime < noaa_date) |>\n  mutate(date = as.Date(datetime),\n         hour = lubridate::hour(datetime)) |> \n  group_by(date, hour) |> \n  summarise(wind_speed_obs = mean(value, na.rm = TRUE)) |> \n  ungroup() |> \n  mutate(time = paste0(hour,':00:00'),\n         datetime = as.POSIXct(paste(date,time), format=\"%Y-%m-%d %H:%M:%S\")) |> \n  select(datetime, wind_speed_obs)\n\nwind_obs_df <- wind_dir_obs |> \n  right_join(wind_velocity_obs, by = c('datetime'))\n\nhistorical_met_df <- historical_met_df_em_avg |> \n  right_join(wind_obs_df, by = c('datetime')) |> \n  drop_na(wind_deg)\n\n# JOIN historic data / obs with future\n\nfuture_met_df_em_avg$wind_deg_obs <- NA\nfuture_met_df_em_avg$wind_speed_obs <- NA\n\nfull_met_data_df <- dplyr::bind_rows(historical_met_df, future_met_df_em_avg) |> \nmutate(wind_speed = wind_speed*3.6,\nwind_speed_obs = wind_speed_obs * 3.6) # convert wind to km/hr\n\n```\n\n```{r, include=TRUE, echo=FALSE, message=FALSE, warning=FALSE}\n\n## MAKE PLOTS\nforecast_start_day <- most_recent\nhistorical_horizon <- 10\n\n## wind speed \nws_ylims <- c(0,40)\nvar_unit <- 'Wind Speed (km/hr)'\nvar_title <- 'Wind Speed'\n\nws_plot <- ggplot2::ggplot(full_met_data_df, ggplot2::aes(x = datetime)) +\n  ggplot2::ylim(ws_ylims) +\n  ggplot2::xlim(forecast_start_day - lubridate::days(historical_horizon), (max(full_met_data_df$datetime)) + lubridate::days(5)) +\n  ggplot2::geom_line(ggplot2::aes(y = wind_speed), color = 'black') +\n  ggplot2::geom_point(ggplot2::aes(x = datetime, y = wind_speed_obs), color = 'red') +\n  ggplot2::geom_vline(aes(xintercept = forecast_start_day),\n                      alpha = 1, linetype = \"dashed\") +\n  ggplot2::annotate(x = (forecast_start_day - lubridate::days(3)), y = max(ws_ylims) - 1, label = 'Past', geom = 'text') +\n  ggplot2::annotate(x = (forecast_start_day + lubridate::days(3)), y = max(ws_ylims) - 1, label = 'Future', geom = 'text') +\n  ggplot2::theme_light() +\n  ggplot2::scale_linetype_manual(name = \"\",\n                                 values = c('solid'),\n                                 labels = c('Forecast Date')) +\n  ggplot2::scale_y_continuous(name = var_unit,\n                              limits = ws_ylims) +\n  ggplot2::labs(x = \"Date\",\n                y = var_unit,\n                title = paste0(var_title,\" Forecast\", lubridate::date(full_met_data_df$forecast_start_day))) +#,\n  ggplot2::theme(axis.text.x = ggplot2::element_text(size = 10),\n                 plot.title = element_text(hjust = 0.5))\n\nws_plot\n\n```\n\n```{r, include=TRUE, echo=FALSE, message=FALSE, warning=FALSE}\n\n## Wind direction\nwd_ylims <- c(0,360)\nwd_var_unit <- 'Wind Direction (deg)'\nvar_title <- 'Wind Direction'\n\nwd_plot <- ggplot2::ggplot(full_met_data_df, ggplot2::aes(x = datetime)) +\n  ggplot2::ylim(wd_ylims) +\n  ggplot2::xlim(forecast_start_day - lubridate::days(historical_horizon), (max(full_met_data_df$datetime)) + lubridate::days(5)) +\n  ggplot2::geom_line(ggplot2::aes(y = wind_deg), color = 'black') +\n  ggplot2::geom_point(ggplot2::aes(x = datetime, y = wind_deg_obs), color = 'red') +\n  ggplot2::geom_vline(aes(xintercept = forecast_start_day),\n                      alpha = 1, linetype = \"dashed\") +\n  ggplot2::annotate(x = (forecast_start_day - lubridate::days(3)), y = max(wd_ylims) - 1, label = 'Past', geom = 'text') +\n  ggplot2::annotate(x = (forecast_start_day + lubridate::days(3)), y = max(wd_ylims) - 1, label = 'Future', geom = 'text') +\n  ggplot2::theme_light() +\n  ggplot2::scale_linetype_manual(name = \"\",\n                                 values = c('solid'),\n                                 labels = c('Forecast Date')) +\n  ggplot2::scale_y_continuous(name = wd_var_unit,\n                              limits = wd_ylims) +\n  ggplot2::labs(x = \"Date\",\n                y = var_unit,\n                title = paste0(var_title,\" Forecast\", lubridate::date(full_met_data_df$forecast_start_day))) +#,\n  ggplot2::theme(axis.text.x = ggplot2::element_text(size = 10),\n                 plot.title = element_text(hjust = 0.5))\n\nwd_plot\n\n```\n\n```{# {r, include=TRUE, echo=FALSE, message=FALSE, warning=FALSE}\n# \n# ## MAKE PLOTS\n# forecast_start_day <- most_recent\n# historical_horizon <- 10\n# \n# ## wind speed \n# ws_ylims <- c(0,40)\n# var_unit <- 'Wind Speed (km/hr)'\n# var_title <- 'Wind Speed'\n# \n# ws_plot <- ggplot2::ggplot(full_met_data_df, ggplot2::aes(x = datetime)) +\n#   ggplot2::ylim(ws_ylims) +\n#   ggplot2::xlim(forecast_start_day - lubridate::days(historical_horizon), (max(full_met_data_df$datetime)) + lubridate::days(5)) +\n#   ggplot2::geom_line(ggplot2::aes(y = wind_speed), color = 'black') +\n#   ggplot2::geom_point(ggplot2::aes(x = datetime, y = wind_speed_obs), color = 'red') +\n#   ggplot2::geom_vline(aes(xintercept = forecast_start_day),\n#                       alpha = 1, linetype = \"dashed\") +\n#   ggplot2::annotate(x = (forecast_start_day - lubridate::days(3)), y = max(ws_ylims) - 1, label = 'Past', geom = 'text') +\n#   ggplot2::annotate(x = (forecast_start_day + lubridate::days(3)), y = max(ws_ylims) - 1, label = 'Future', geom = 'text') +\n#   ggplot2::theme_light() +\n#   ggplot2::scale_linetype_manual(name = \"\",\n#                                  values = c('solid'),\n#                                  labels = c('Forecast Date')) +\n#   ggplot2::scale_y_continuous(name = var_unit,\n#                               limits = ws_ylims) +\n#   ggplot2::labs(x = \"Date\",\n#                 y = var_unit,\n#                 title = paste0(var_title,\" Forecast\", lubridate::date(full_met_data_df$forecast_start_day))) +#,\n#   ggplot2::theme(axis.text.x = ggplot2::element_text(size = 10),\n#                  plot.title = element_text(hjust = 0.5))\n# \n# ws_plot\n\n```\n\n```{r, include=TRUE, echo=FALSE, message=FALSE, warning=FALSE}\n\n## Air Temperature\nat_ylims <- c(10,30)\nat_var_title = 'Air Temperature'\nat_var_unit = 'Temperature (°C)' \n\nat_plot <- ggplot2::ggplot(full_met_data_df, ggplot2::aes(x = datetime)) +\n  ggplot2::ylim(at_ylims) +\n  ggplot2::xlim(forecast_start_day - lubridate::days(historical_horizon), (max(full_met_data_df$datetime)) + lubridate::days(5)) +\n  ggplot2::geom_line(ggplot2::aes(y = air_temp), color = 'black') +\n  #ggplot2::geom_point(ggplot2::aes(x = datetime, y = wind_deg_obs), color = 'red') +\n  ggplot2::geom_vline(aes(xintercept = forecast_start_day),\n                      alpha = 1, linetype = \"dashed\") +\n  ggplot2::annotate(x = (forecast_start_day - lubridate::days(3)), y = max(at_ylims) - 1, label = 'Past', geom = 'text') +\n  ggplot2::annotate(x = (forecast_start_day + lubridate::days(3)), y = max(at_ylims) - 1, label = 'Future', geom = 'text') +\n  ggplot2::theme_light() +\n  ggplot2::scale_linetype_manual(name = \"\",\n                                 values = c('solid'),\n                                 labels = c('Forecast Date')) +\n  ggplot2::scale_y_continuous(name = at_var_unit,\n                              limits = at_ylims) +\n  ggplot2::labs(x = \"Date\",\n                y = at_var_unit,\n                title = paste0(at_var_title,\" Forecast\")) +#,\n  ggplot2::theme(axis.text.x = ggplot2::element_text(size = 10),\n                 plot.title = element_text(hjust = 0.5))\n\nat_plot\n## 3-Day Wind Direction and Wind Speed Predictions \n```\n\n```{r}\n\n#layout_column_wrap(\n#  width = \"250px\",\n#  value_box(\n#    title = \"Average wind direction for the next three days\", \n#    value = avg_wind_dir_3_day_future,\n#    showcase = bs_icon(\"compass\"),\n#    theme_color = \"primary\"\n#  ),\n#    value_box(\n#    title = \"Average wind speed for the next three days\", \n#    value = paste0(round(avg_wind_speed_3_day_future,1), ' m/s'),\n#    showcase = bs_icon(\"wind\"),\n#    theme_color = \"success\" \n#  )\n#)\n\n```\n\n<br /> <br />\n\n```{r}\n\n## ADD UNCERTAINTY TO THIS PLOT \n\n#wind_df_subset <- wind_df |> \n#  filter(date > as.Date(most_recent), \n#         date <= (as.Date(most_recent) + lubridate::days(3)))\n\n#ggplot2::ggplot(wind_df_subset, aes(x=as.Date(date))) +\n#  geom_line(aes(y=windspeed), line = 'black') +\n#  ggplot2::geom_ribbon(ggplot2::aes(ymin = windspeed_ci_025, \n#                                    ymax = windspeed_ci_975),\n#                       alpha = 0.5,\n#                       fill = 'lightblue') +\n#  labs(x = 'Date',\n#       y = 'Windspeed (m/s)',\n#       title = 'Three-Day Wind Speed Forecast') +\n#  ggplot2::theme(plot.title = element_text(hjust = 0.5))\n  \n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["styles.css"],"toc":true,"output-file":"weather.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Archive","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.4.146","editor":"visual","theme":["cerulean","custom.scss"],"title-block-style":"default","title-block-banner":"img/banner.jpg","title-block-banner-color":"white","page-layout":"full","title":"Weather Forecasts"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}