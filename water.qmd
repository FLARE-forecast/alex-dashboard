---
title: Water Quality Forecasts
---

This page contains information about the water quality of Lake Alexandrina <br /> <br />

Disclaimer: The data provided on this page is experimental.<br /> <br />

All forecasts are valid for 10:30am ACDT.

```{r setup, message=FALSE, warning=FALSE, echo=FALSE}
library(tidyverse)
library(arrow)
source('./R/dashboard_plotting_tool.R')
```

## Water Temperature Forecast

```{r, warning=FALSE, message=FALSE, echo=FALSE}
s3_score <- arrow::s3_bucket(bucket = "bio230121-bucket01/flare/scores/parquet", endpoint_override = "renc.osn.xsede.org", anonymous = TRUE)
s3_forecast <- arrow::s3_bucket(bucket = "bio230121-bucket01/flare/forecasts/parquet", endpoint_override = "renc.osn.xsede.org", anonymous = TRUE)
s3_targets <- arrow::s3_bucket(bucket = "bio230121-bucket01/flare/targets/ALEX", endpoint_override = "renc.osn.xsede.org", anonymous = TRUE)
site <- 'ALEX'

most_recent <-  arrow::open_dataset(s3_score) |> 
  filter(site_id %in% c("ALEX")) |> 
  summarize(max = max(reference_datetime)) |> 
  collect() |> 
  pull()

source('R/alex_target_generation.R')

obs_df <- read_csv('./targets/ALEX-targets-insitu.csv') |> 
  filter(variable == 'temperature',
         datetime <= most_recent) |> 
  collect()

# obs_df <- arrow::open_csv_dataset(s3_targets) |> 
#   #read_csv('./targets/ALEX-targets-insitu.csv') |> 
#   # filter(datetime <= obs_dates_grab,
#   #        datetime <= most_recent) |> 
#   filter(variable == 'temperature',
#          datetime <= most_recent) |> 
#   #select(datetime, observation) |> 
#   collect() #|> 
#   #mutate(reference_datetime = most_recent)

score_df <- arrow::open_dataset(s3_score) |>
  filter(variable == "temperature",
         depth %in% c(0.5),
         site_id %in% site,
         horizon >= 0,
         #reference_datetime == as.Date('1-05-25')) |> 
         reference_datetime == (most_recent)) |>
  dplyr::collect()


historical_horizon <- 30 
historical_reference_datetime <- most_recent - days(historical_horizon)

score_df_historic <- arrow::open_dataset(s3_score) |> 
    filter(variable == "temperature",
         depth %in% c(0.5),
         site_id %in% site,
         horizon == 1,
         reference_datetime >= historical_reference_datetime, 
         reference_datetime < most_recent) |> 
  collect()
  

dashboard_plotting_tool(data = score_df, historic_data = score_df_historic, depths = c(0.5), tzone = 'Australia/Adelaide', ylims = c(10,30), site_name = site, obs_hist = obs_df, historical_horizon = historical_horizon, forecast_horizon_confidence = 10)

```

<br /> <br />

## Salinity Forecast

```{r, warning=FALSE, message=FALSE, echo=FALSE}
## SALT PLOT 
obs_df <- read_csv('./targets/ALEX-targets-insitu.csv') |> 
  # filter(datetime <= obs_dates_grab,
  #        datetime <= most_recent) |> 
  filter(variable == 'salt') |> 
  #filter(datetime >= historical_reference_datetime) |> 
  #select(datetime, observation) |> 
  collect() |> 
  mutate(reference_datetime = most_recent)

score_df <- arrow::open_dataset(s3_score) |>
  filter(variable == "salt",
         depth %in% c(0.5),
         site_id %in% site,
         horizon >= 0,
         reference_datetime == most_recent) |>
  dplyr::collect()

score_df_historic <- arrow::open_dataset(s3_score) |> 
    filter(variable == "salt",
         depth %in% c(0.5),
         site_id %in% site,
         horizon == 1,
         reference_datetime >= historical_reference_datetime, 
         reference_datetime < most_recent) |> 
  collect()
  

dashboard_plotting_tool(data = score_df, historic_data = score_df_historic, depths = c(0.5), tzone = 'Australia/Adelaide', ylims = c(0,1), site_name = site, obs_hist = obs_df, historical_horizon = historical_horizon, forecast_horizon_confidence = 10)

```

<br /> <br />

## Lake Depth Forecast

```{r, warning=FALSE, message=FALSE, echo=FALSE}
## Depth PLOT 
obs_df <- read_csv('./targets/ALEX-targets-insitu.csv') |> 
  # filter(datetime <= obs_dates_grab,
  #        datetime <= most_recent) |> 
  filter(variable == 'depth') |> 
  #select(datetime, observation) |> 
  collect() |> 
  mutate(reference_datetime = most_recent)

score_df <- arrow::open_dataset(s3_score) |>
  filter(variable == "depth",
         site_id %in% site,
         horizon >= 0,
         reference_datetime == most_recent) |>
  dplyr::collect()

score_df_historic <- arrow::open_dataset(s3_score) |> 
    filter(variable == "depth",
         site_id %in% site,
         horizon == 1,
         reference_datetime >= historical_reference_datetime, 
         reference_datetime < most_recent) |> 
  collect()

dashboard_plotting_tool(data = score_df, historic_data = score_df_historic, depths = c(NA), tzone = 'Australia/Adelaide', ylims = c(0,10), site_name = site, obs_hist = obs_df, historical_horizon = historical_horizon, forecast_horizon_confidence = 10)
```
