---
title: Water Quality Forecasts
---

This page contains information about the water quality of Lake Alexandrina <br /> <br />

```{r setup, message=FALSE, warning=FALSE, echo=FALSE}
library(tidyverse)
library(arrow)
source('./R/dashboard_plotting_tool.R')
```

## Water Temperature Forecast

```{r, warning=FALSE, echo=FALSE}
lake_directory <- getwd()
options(timeout=300)

download.file(url = paste0("https://water.data.sa.gov.au/Export/BulkExport?DateRange=Custom&StartTime=2020-01-01%2000%3A00&EndTime=", Sys.Date(), "%2000%3A00&TimeZone=0&Calendar=CALENDARYEAR&Interval=PointsAsRecorded&Step=1&ExportFormat=csv&TimeAligned=True&RoundData=True&IncludeGradeCodes=False&IncludeApprovalLevels=False&IncludeQualifiers=False&IncludeInterpolationTypes=False&Datasets[0].DatasetName=Lake%20Level.Best%20Available--Continuous%40A4261133&Datasets[0].Calculation=Instantaneous&Datasets[0].UnitId=82&Datasets[1].DatasetName=EC%20Corr.Best%20Available%40A4261133&Datasets[1].Calculation=Instantaneous&Datasets[1].UnitId=305&Datasets[2].DatasetName=Water%20Temp.Best%20Available--Continuous%40A4261133&Datasets[2].Calculation=Instantaneous&Datasets[2].UnitId=169&_=1711554907800"),
              destfile = file.path(lake_directory,"data_raw","current_insitu.csv"))
```

```{r, warning=FALSE, message=FALSE, echo=FALSE}
s3_score <- arrow::s3_bucket(bucket = "bio230121-bucket01/flare/scores/parquet", endpoint_override = "renc.osn.xsede.org", anonymous = TRUE)
s3_forecast <- arrow::s3_bucket(bucket = "bio230121-bucket01/flare/forecasts/parquet", endpoint_override = "renc.osn.xsede.org", anonymous = TRUE)
s3_targets <- arrow::s3_bucket(bucket = "bio230121-bucket01/flare/targets/ALEX", endpoint_override = "renc.osn.xsede.org", anonymous = TRUE)
site <- 'ALEX'

most_recent <-  arrow::open_dataset(s3_score) |> 
  filter(site_id %in% c("ALEX")) |> 
  summarize(max = max(reference_datetime)) |> 
  collect() |> 
  pull()

source('R/alex_target_generation.R')

obs_df <- arrow::open_csv_dataset(s3_targets) |> 
  #read_csv('./targets/ALEX-targets-insitu.csv') |> 
  # filter(datetime <= obs_dates_grab,
  #        datetime <= most_recent) |> 
  filter(variable == 'temperature',
         datetime <= most_recent) |> 
  #select(datetime, observation) |> 
  collect() #|> 
  #mutate(reference_datetime = most_recent)

score_df <- arrow::open_dataset(s3_score) |>
  filter(variable == "temperature",
         depth %in% c(0.5),
         site_id %in% site,
         horizon >= 0,
         #reference_datetime == as.Date('1-05-25')) |> 
         reference_datetime == (most_recent)) |>
  dplyr::collect()

dashboard_plotting_tool(data = score_df, depths = c(0.5), tzone = 'Australia/Adelaide', ylims = c(10,30), site_name = site, obs_hist = obs_df, historical_horizon = 30, forecast_horizon_confidence = 10)

```

<br /> <br />

## Salinity Forecast

```{r, warning=FALSE, message=FALSE, echo=FALSE}
## SALT PLOT 
obs_df <- read_csv('./targets/ALEX-targets-insitu.csv') |> 
  # filter(datetime <= obs_dates_grab,
  #        datetime <= most_recent) |> 
  filter(variable == 'salt') |> 
  #select(datetime, observation) |> 
  collect() |> 
  mutate(reference_datetime = most_recent)

score_df <- arrow::open_dataset(s3_score) |>
  filter(variable == "salt",
         depth %in% c(0.5),
         site_id %in% site,
         horizon >= 0,
         reference_datetime == most_recent) |>
  dplyr::collect()

dashboard_plotting_tool(data = score_df, depths = c(0.5), tzone = 'Australia/Adelaide', ylims = c(0,1), site_name = site, obs_hist = obs_df, historical_horizon = 30, forecast_horizon_confidence = 10)

```

<br /> <br />

## Lake Depth Forecast

```{r, warning=FALSE, message=FALSE, echo=FALSE}
## Depth PLOT 
obs_df <- read_csv('./targets/ALEX-targets-insitu.csv') |> 
  # filter(datetime <= obs_dates_grab,
  #        datetime <= most_recent) |> 
  filter(variable == 'depth') |> 
  #select(datetime, observation) |> 
  collect() |> 
  mutate(reference_datetime = most_recent)

score_df <- arrow::open_dataset(s3_score) |>
  filter(variable == "depth",
         site_id %in% site,
         horizon >= 0,
         reference_datetime == most_recent) |>
  dplyr::collect()

dashboard_plotting_tool(data = score_df, depths = c(NA), tzone = 'Australia/Adelaide', ylims = c(0,10), site_name = site, obs_hist = obs_df, historical_horizon = 30, forecast_horizon_confidence = 10)
```
