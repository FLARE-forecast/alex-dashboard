---
title: Weather Forecasts
---

This page contains information about weather in the Lake Alexandrina area

<br />

Disclaimer: The data provided on this page is experimental.<br /> <br />

```{r setup, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}
library(tidyverse)
library(arrow)
library(bslib)
library(bsicons)
library(leaflet)
library(graphics)
library(jpeg)

source('R/wind_plot_dashboard.R')

lake_directory <- getwd()
options(timeout=300)

knitr::opts_chunk$set(echo=FALSE, message=FALSE, warning=FALSE)

degToCompass <- function(num){

  arr = c("N","NNE","NE","ENE","E","ESE", "SE", "SSE","S","SSW","SW","WSW","W","WNW","NW","NNW")

  val = as.numeric((num/22.5) + 0.5)
  val_position <- val %% 16

  
  if (any(val > 16)){
    val_over <- which(val > 16)
    
    for (i in val_over){
      print(i)
      val_position[i] <- 16 ## hard code the index to 16 (last value in the wind directions)
      print(length(val_position[i]))
    }
  } 
  
  if (any(val < 1)){
    val_under <- which(val < 1)
    for (i in val_under){
      print(i)
      val_position[i] <- 1 ## hard code the index to 16 (last value in the wind directions)
      print(length(val_position[i]))
    }  
    }
  
  wind_direction <- arr[val_position] 
  
  return(wind_direction)
}

s3_score <- arrow::s3_bucket(bucket = "bio230121-bucket01/flare/scores/parquet", endpoint_override = "renc.osn.xsede.org", anonymous = TRUE)
most_recent <-  arrow::open_dataset(s3_score) |> 
  filter(site_id %in% c("ALEX")) |> 
  summarize(max = max(reference_datetime)) |> 
  collect() |> 
  pull()

## Met vizualization
# windspeed 
noaa_date <- most_recent - lubridate::days(1)
noaa_df <- arrow::s3_bucket(file.path("bio230121-bucket01/flare/drivers/met/gefs-v12/stage2",paste0("reference_datetime=",noaa_date),paste0("site_id=ALEX")),
                 endpoint_override = 'renc.osn.xsede.org',
                 anonymous = TRUE)

air_temp_df <- arrow::open_dataset(noaa_df) |> 
  dplyr::filter(variable %in% c("air_temperature")) |> 
  mutate(datetime = lubridate::with_tz(datetime, tzone = "Australia/Adelaide")) |> 
  collect()

northwind_df <- arrow::open_dataset(noaa_df) |> 
  dplyr::filter(variable %in% c("northward_wind")) |>
  mutate(datetime = lubridate::with_tz(datetime, tzone = "Australia/Adelaide")) |> 
  collect()

eastwind_df <- arrow::open_dataset(noaa_df) |> 
  dplyr::filter(variable %in% c("eastward_wind")) |> 
  mutate(datetime = lubridate::with_tz(datetime, tzone = "Australia/Adelaide")) |> 
  collect()

future_met_df_em_avg <- dplyr::bind_rows(northwind_df, eastwind_df, air_temp_df) |> 
  pivot_wider(names_from = variable, values_from = prediction) |> 
  group_by(parameter, datetime) |> 
  mutate(windspeed = sqrt(northward_wind^2 + eastward_wind^2)) |> 
  group_by(datetime) |> ## group across EMs
  mutate(windspeed_median_em = median(windspeed, na.rm = TRUE),
         #windspeed_sd_em = sd(windspeed, na.rm = TRUE),
         windspeed_ci_025_em = quantile(windspeed, probs = c(.025)),
         windspeed_ci_975_em = quantile(windspeed, probs = c(.975)),
         eastwind_avg_em = median(eastward_wind, na.rm = TRUE), 
         northwind_avg_em = median(northward_wind, na.rm = TRUE),
         air_temp_avg_em = median((air_temperature - 273.15))) |> 
  ungroup() |> 
  distinct(datetime, .keep_all = TRUE) |> 
  mutate(wind_deg = ((270-atan2(eastwind_avg_em,northwind_avg_em)*180/pi)%%360), ## ADD WIND DIRECTION
         wind_dir = degToCompass(wind_deg)) |> 
  select(datetime, wind_speed = windspeed_median_em, wind_deg, wind_dir, air_temp = air_temp_avg_em)
```

<br /> <br />

```{r, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}
## MAKE PLOT SHOWING HISTORICAL OBS, HISTORICAL FORECAST, AND FUTURE FORECAST
# 
# if (!dir.exists(file.path(lake_directory,'data_raw'))){
#   dir.create(file.path(lake_directory,'data_raw'))
# }
# 
# # download wind velocity
# download.file(url = paste0("https://water.data.sa.gov.au/Export/DataSet?DataSet=Wind%20Vel.Best%20Available--Continuous%40A4260603&Calendar=CALENDARYEAR&DateRange=Days30&UnitID=185&Conversion=Instantaneous&IntervalPoints=PointsAsRecorded&ApprovalLevels=False&Qualifiers=False&Step=1&ExportFormat=csv&Compressed=true&RoundData=True&GradeCodes=True&InterpolationTypes=False&Timezone=9.5&_=1733427930976"),
#               destfile = file.path(lake_directory,"data_raw","wind_velocity_obs.csv"))
# 
# # download wind direction
# download.file(url = paste0("https://water.data.sa.gov.au/Export/DataSet?DataSet=Wind%20Dir.Telem%40A4260603&Calendar=CALENDARYEAR&DateRange=Days30&UnitID=52&Conversion=Instantaneous&IntervalPoints=PointsAsRecorded&ApprovalLevels=False&Qualifiers=False&Step=1&ExportFormat=csv&Compressed=true&RoundData=True&GradeCodes=True&InterpolationTypes=False&Timezone=9.5&_=1733428211983"),
#               destfile = file.path(lake_directory,"data_raw","wind_direction_obs.csv"))


## NOAA FUTURE DATA READ IN ABOVE

## NOAA HISTORICAL DATA
noaa_historical_s3 <- arrow::s3_bucket(bucket = "bio230121-bucket01/flare/drivers/met/gefs-v12/stage3/site_id=ALEX", 
                                   endpoint_override = "renc.osn.xsede.org", anonymous = TRUE)

historical_date_cutoff <- noaa_date - lubridate::days(10)

noaa_historical_df <- arrow::open_dataset(noaa_historical_s3) |> 
  mutate(datetime = lubridate::with_tz(datetime, tzone = "Australia/Adelaide")) |> 
  filter(variable %in% c('air_temperature','northward_wind','eastward_wind'),
         #datetime <= noaa_date, 
         datetime > historical_date_cutoff) |>
  collect()

historical_met_df_em_avg <- noaa_historical_df |> 
  pivot_wider(names_from = variable, values_from = prediction) |> 
  group_by(parameter, datetime) |> 
  mutate(windspeed = sqrt(northward_wind^2 + eastward_wind^2)) |> 
  group_by(datetime) |> ## group across EMs
  mutate(windspeed_median_em = median(windspeed, na.rm = TRUE),
         #windspeed_sd_em = sd(windspeed, na.rm = TRUE),
         windspeed_ci_025_em = quantile(windspeed, probs = c(.025)),
         windspeed_ci_975_em = quantile(windspeed, probs = c(.975)),
         eastwind_avg_em = median(eastward_wind, na.rm = TRUE), 
         northwind_avg_em = median(northward_wind, na.rm = TRUE),
         air_temp_avg_em = median((air_temperature - 273.15))) |> 
  ungroup() |> 
  distinct(datetime, .keep_all = TRUE) |> 
  mutate(wind_deg = ((270-atan2(eastwind_avg_em,northwind_avg_em)*180/pi)%%360), 
         wind_dir = degToCompass(wind_deg)) |> 
  select(datetime, wind_speed = windspeed_median_em, wind_deg, wind_dir, air_temp = air_temp_avg_em)
```

```{r, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}

## READ IN WIND OBSERVATIONS

wind_dir_obs <- read_csv('targets/ALEX_wind_dir_targets.csv') |> 
  #mutate(datetime = lubridate::with_tz(datetime, tzone = "Australia/Adelaide")) |> 
  mutate(datetime = lubridate::force_tz(datetime, tzone = "Australia/Adelaide")) |> 
  filter(datetime > (historical_date_cutoff)) |> #, 
         #datetime <= noaa_date) |> 
  mutate(date = as.Date(datetime),
         hour = lubridate::hour(datetime)) |> 
  group_by(date, hour) |> 
  summarise(wind_deg_obs = mean(value, na.rm = TRUE)) |> 
  ungroup() |> 
  mutate(time = paste0(hour,':00:00'),
         datetime = as.POSIXct(paste(date,time), format="%Y-%m-%d %H:%M:%S")) |> 
  select(datetime, wind_deg_obs)

wind_velocity_obs <- read_csv('targets/ALEX_wind_speed_targets.csv') |> 
  #mutate(datetime = lubridate::with_tz(datetime, tzone = "Australia/Adelaide")) |> 
  mutate(datetime = lubridate::force_tz(datetime, tzone = "Australia/Adelaide")) |>   
  filter(datetime > (historical_date_cutoff)) |> #, 
         #datetime < noaa_date) |>
  mutate(date = as.Date(datetime),
         hour = lubridate::hour(datetime)) |> 
  group_by(date, hour) |> 
  summarise(wind_speed_obs = mean(value, na.rm = TRUE)) |> 
  ungroup() |> 
  mutate(time = paste0(hour,':00:00'),
         datetime = as.POSIXct(paste(date,time), format="%Y-%m-%d %H:%M:%S")) |> 
  select(datetime, wind_speed_obs)

wind_obs_df <- wind_dir_obs |> 
  right_join(wind_velocity_obs, by = c('datetime'))

historical_met_df <- historical_met_df_em_avg |> 
  right_join(wind_obs_df, by = c('datetime')) |> 
  drop_na(wind_deg)

# JOIN historic data / obs with future

future_met_df_em_avg$wind_deg_obs <- NA
future_met_df_em_avg$wind_speed_obs <- NA

full_met_data_df <- dplyr::bind_rows(historical_met_df, future_met_df_em_avg) |> 
mutate(wind_speed = wind_speed*3.6,
wind_speed_obs = wind_speed_obs * 3.6, 
date = as.Date(datetime))  |> # convert wind to km/hr
filter(!(date == noaa_date & is.na(wind_deg_obs)))
```

```{r, include=TRUE}
# make wind plot with arrows 

wind_plot_df <- full_met_data_df |> 
  filter(datetime > (lubridate::with_tz(most_recent, tzone = "Australia/Adelaide") - lubridate::days(3)),
         datetime < lubridate::with_tz(most_recent, tzone = "Australia/Adelaide") + lubridate::days(3)) |> 
  group_by(hour_group = lubridate::floor_date(datetime, '6 hour')) |> 
  summarise(wind_speed_mean = mean(wind_speed, na.rm = T),
            wind_deg_mean = mean(wind_deg, na.rm = T),
            wind_speed_mean_obs = mean(wind_speed_obs, na.rm = T), 
            wind_deg_mean_obs = mean(wind_deg_obs, na.rm = T)) |> 
  ungroup() |> 
  mutate(date = as.Date(hour_group))

## MAKE TIME TO MATCH VETICAL LINE WITH LAST OBSERVATION 
# This is added because we aggregate obs to 6 hour intervals. Most recent NOAA is valid at 10:30am ACDT, which is in between two aggregate periods (6am - 12pm). Move the transition line to match with 6am value...

compass <-readJPEG('./north_arrow_black.jpg')


weather_time_match <- lubridate::with_tz(most_recent, tzone = "Australia/Adelaide") - 
  lubridate::hours(4) - lubridate::minutes(30)

plot(wind_plot_df$hour_group, wind_plot_df$wind_speed_mean, ylim = c(0,48), cex = 0.01,   xlab = "Date",
     ylab = "Wind Speed (km/hr)", xaxt = 'n')

grid(nx = NA,
     ny = NULL,
     lty = 2,      # Grid line type
     col = "gray", # Grid line color
     lwd = 1)

axis(1, wind_plot_df$hour_group, format(wind_plot_df$hour_group, "%b %d"), cex.axis = .7)

#horizontal axis
# axis(2,
#      #at = seq(0, 40, by = 10),
#      tck = 1, lty = 1, col = "gray")
# 
# #vertical axis
# axis(1,
#      #at = wind_plot_df$hour_group,
#      tck = 1, lty = 1, col = "gray")

shape::Arrowhead(x0 = wind_plot_df$hour_group, 
          y0 = wind_plot_df$wind_speed_mean, 
          angle = wind_plot_df$wind_deg_mean, 
          arr.length = 0.18,
          arr.width = 0.1,
          arr.type = 'triangle',
          lty = 1,
          lcol = "black",
          )

shape::Arrowhead(x0 = wind_plot_df$hour_group, 
          y0 = wind_plot_df$wind_speed_mean_obs, 
          angle = wind_plot_df$wind_deg_mean_obs, 
          arr.length = 0.18,
          arr.width = 0.1,
          arr.type = 'triangle',
          lty = 1,
          lcol = "red",
          )

abline(v = weather_time_match, lty = 2, col = 'black')

lines(wind_plot_df$hour_group, wind_plot_df$wind_speed_mean, col = 'black')
lines(wind_plot_df$hour_group, wind_plot_df$wind_speed_mean_obs, col = 'red')

rasterImage(compass,
            wind_plot_df$hour_group[length(wind_plot_df$hour_group)-2],
            40,
            wind_plot_df$hour_group[length(wind_plot_df$hour_group)],
            48)

```

```{r, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}

## MAKE PLOTS
forecast_start_day <- most_recent
historical_horizon <- 3

## wind speed 
ws_ylims <- c(0,40)
var_unit <- 'Wind Speed (km/hr)'
var_title <- 'Wind Speed'

# ws_plot <- ggplot2::ggplot(full_met_data_df, ggplot2::aes(x = datetime)) +
#   ggplot2::ylim(ws_ylims) +
#   ggplot2::xlim(forecast_start_day - lubridate::days(historical_horizon), forecast_start_day + lubridate::days(historical_horizon)) +
#   ggplot2::geom_line(ggplot2::aes(y = wind_speed), color = 'black') +
#   ggplot2::geom_point(ggplot2::aes(x = datetime, y = wind_speed_obs), color = 'red') +
#   ggplot2::geom_vline(aes(xintercept = forecast_start_day),
#                       alpha = 1, linetype = "dashed") +
#   ggplot2::annotate(x = (forecast_start_day - lubridate::days(3)), y = max(ws_ylims) - 1, label = 'Past', geom = 'text') +
#   ggplot2::annotate(x = (forecast_start_day + lubridate::days(3)), y = max(ws_ylims) - 1, label = 'Future', geom = 'text') +
#   ggplot2::theme_light() +
#   ggplot2::scale_linetype_manual(name = "",
#                                  values = c('solid'),
#                                  labels = c('Forecast Date')) +
#   ggplot2::scale_y_continuous(name = var_unit,
#                               limits = ws_ylims) +
#   ggplot2::labs(x = "Date",
#                 y = var_unit,
#                 title = paste0(var_title," Forecast", lubridate::date(full_met_data_df$forecast_start_day))) +#,
#   ggplot2::theme(axis.text.x = ggplot2::element_text(size = 10),
#                  plot.title = element_text(hjust = 0.5))
# 
# ws_plot

```

```{r, include=FALSE, echo=FALSE, message=FALSE, warning=FALSE}

## Wind direction
wd_ylims <- c(0,360)
wd_var_unit <- 'Wind Direction (deg)'
var_title <- 'Wind Direction'

# wd_plot <- ggplot2::ggplot(full_met_data_df, ggplot2::aes(x = datetime)) +
#   ggplot2::ylim(wd_ylims) +
#   ggplot2::xlim(forecast_start_day - lubridate::days(historical_horizon), forecast_start_day + lubridate::days(historical_horizon)) +
#   ggplot2::geom_line(ggplot2::aes(y = wind_deg), color = 'black') +
#   ggplot2::geom_point(ggplot2::aes(x = datetime, y = wind_deg_obs), color = 'red') +
#   ggplot2::geom_vline(aes(xintercept = forecast_start_day),
#                       alpha = 1, linetype = "dashed") +
#   ggplot2::annotate(x = (forecast_start_day - lubridate::days(3)), y = max(wd_ylims) - 1, label = 'Past', geom = 'text') +
#   ggplot2::annotate(x = (forecast_start_day + lubridate::days(3)), y = max(wd_ylims) - 1, label = 'Future', geom = 'text') +
#   ggplot2::theme_light() +
#   ggplot2::scale_linetype_manual(name = "",
#                                  values = c('solid'),
#                                  labels = c('Forecast Date')) +
#   ggplot2::scale_y_continuous(name = wd_var_unit,
#                               limits = wd_ylims) +
#   ggplot2::labs(x = "Date",
#                 y = var_unit,
#                 title = paste0(var_title," Forecast", lubridate::date(full_met_data_df$forecast_start_day))) +#,
#   ggplot2::theme(axis.text.x = ggplot2::element_text(size = 10),
#                  plot.title = element_text(hjust = 0.5))
# 
# wd_plot

```


```{r, include=TRUE, echo=FALSE, message=FALSE, warning=FALSE}

## Air Temperature
at_ylims <- c(10,40)
at_var_title = 'Air Temperature'
at_var_unit = 'Temperature (°C)' 

at_plot <- ggplot2::ggplot(full_met_data_df, ggplot2::aes(x = datetime)) +
  ggplot2::ylim(at_ylims) +
  ggplot2::xlim(forecast_start_day - lubridate::days(historical_horizon), forecast_start_day + lubridate::days(historical_horizon)) +
  ggplot2::geom_line(ggplot2::aes(y = air_temp), color = 'black') +
  #ggplot2::geom_point(ggplot2::aes(x = datetime, y = wind_deg_obs), color = 'red') +
  ggplot2::geom_vline(aes(xintercept = forecast_start_day),
                      alpha = 1, linetype = "dashed") +
  ggplot2::annotate(x = (forecast_start_day - lubridate::days(3)), y = max(at_ylims) - 1, label = 'Past', geom = 'text') +
  ggplot2::annotate(x = (forecast_start_day + lubridate::days(3)), y = max(at_ylims) - 1, label = 'Future', geom = 'text') +
  ggplot2::theme_light() +
  ggplot2::scale_linetype_manual(name = "",
                                 values = c('solid'),
                                 labels = c('Forecast Date')) +
  ggplot2::scale_y_continuous(name = at_var_unit,
                              limits = at_ylims) +
  ggplot2::labs(x = "Date",
                y = at_var_unit,
                title = paste0(at_var_title," Forecast")) +#,
  ggplot2::theme(axis.text.x = ggplot2::element_text(size = 10),
                 plot.title = element_text(hjust = 0.5))

at_plot
## 3-Day Wind Direction and Wind Speed Predictions 
```

```{r}

#layout_column_wrap(
#  width = "250px",
#  value_box(
#    title = "Average wind direction for the next three days", 
#    value = avg_wind_dir_3_day_future,
#    showcase = bs_icon("compass"),
#    theme_color = "primary"
#  ),
#    value_box(
#    title = "Average wind speed for the next three days", 
#    value = paste0(round(avg_wind_speed_3_day_future,1), ' m/s'),
#    showcase = bs_icon("wind"),
#    theme_color = "success" 
#  )
#)

```

<br /> <br />

```{r}

## ADD UNCERTAINTY TO THIS PLOT 

#wind_df_subset <- wind_df |> 
#  filter(date > as.Date(most_recent), 
#         date <= (as.Date(most_recent) + lubridate::days(3)))

#ggplot2::ggplot(wind_df_subset, aes(x=as.Date(date))) +
#  geom_line(aes(y=windspeed), line = 'black') +
#  ggplot2::geom_ribbon(ggplot2::aes(ymin = windspeed_ci_025, 
#                                    ymax = windspeed_ci_975),
#                       alpha = 0.5,
#                       fill = 'lightblue') +
#  labs(x = 'Date',
#       y = 'Windspeed (m/s)',
#       title = 'Three-Day Wind Speed Forecast') +
#  ggplot2::theme(plot.title = element_text(hjust = 0.5))
  
```
